import subprocess
import json
from .opn1lw import opn1lw
from .smn1 import smn1


def run_paraphase(paraphase, bam, gene, reference, samtools, minimap2, output):
    """
    Runs the paraphase tool.

    :param paraphase: Path to paraphase
    :param bam: Path to bam file
    :param gene: Gene name (opn1lw, smn1)
    :param reference: Path to reference genome
    :param samtools: Path to samtools
    :param minimap2: Path to minimap2
    :param output: Output directory
    """

    # folder for paraphase output
    out_folder = f"{output}/paraphase_output"

    try:
        subprocess.run([paraphase, "-b", bam, "-g", gene, "-r", reference, "--samtools",
                        samtools, "--minimap2", minimap2, "-o", out_folder, "--prefix", gene],
                       capture_output=True, text=True, check=True)

        print("Paraphase ran successfully.")
    except subprocess.CalledProcessError as e:
        print("Paraphase error: {e}")

    json_output = f"{out_folder}/{gene}.paraphase.json"

    analyze(json_output, gene, output)
    


def analyze(json_file, gene, output):
    """
    Analyzes the JSON output file generated by paraphase.

    :param json_file: JSON file generated by paraphase
    :param gene: Gene name (opn1lw, smn1)
    :param output: Output directory
    """

    with open(json_file) as file:

        data = json.load(file)

    if gene == 'opn1lw':
        opn1lw(data, output) 
    elif gene == 'smn1':
        smn1(data, output)
    else:
        print(f"{gene} is not a supported gene.")
    

def read_parameters(args):
    """
    Reads the command-line parameters and executes the corresponding function.

    :param args: Command-line arguments
    """

    if args.paraphase:
        run_paraphase(args.paraphase, args.bam, args.gene, args.reference, args.samtools, args.minimap2, args.output)
    elif args.json:
        analyze(args.json, args.gene, args.output)
